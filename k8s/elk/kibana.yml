---
# Source: kibana/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kibana
  labels:
    app: kibana
    chart: "kibana-2.2.0"
    release: kibana
    heritage: Tiller
data:
  kibana.yml: |
    elasticsearch.url: http://elasticsearch-client.logging.svc.cluster.local:9200
    server.host: "0"
    server.name: kibana.aws5.tv2.no
    
---
# Source: kibana/templates/tests/test-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kibana-test
  labels:
    app: kibana
    chart: "kibana-2.2.0"
    heritage: "Tiller"
    release: "kibana"
data:
  run.sh: |-
    @test "Test Status" {
      url="http://kibana:443/api/status"

      # retry for 1 minute
      run curl -s -o /dev/null -I -w "%{http_code}" --retry 30 --retry-delay 2 $url

      code=$(curl -s -o /dev/null -I -w "%{http_code}" $url)
      body=$(curl $url)
      if [ "$code" == "503" ]
      then
        skip "Kibana Unavailable (503), can't get status - see pod logs: $body"
      fi

      result=$(echo $body | jq -cr '.status.statuses[]')
      [ "$result" != "" ]

      result=$(echo $body | jq -cr '.status.statuses[] | select(.state != "green")')
      [ "$result" == "" ]
    }

---
# Source: kibana/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kibana
    chart: kibana-2.2.0
    release: kibana
    heritage: Tiller
  name: kibana
spec:
  # type: NodePort
  type: LoadBalancer
  selector:
    app: kibana
    release: kibana
  ports:
    - port: 80
      targetPort: 5601
      protocol: TCP

---
  apiVersion: extensions/v1beta1
  kind: Ingress
  metadata:
    namespace: demo
    annotations:
      kubernetes.io/ingress.class: nginx
    name: kibana-ingress
  spec:
    rules:
      - host: kibana.aws5.tv2.no
        http:
          paths:
            - path: /
              backend:
                serviceName: kibana
                servicePort: 80
---
# Source: kibana/templates/deployment.yaml
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  labels:
    app: kibana
    chart: "kibana-2.2.0"
    heritage: Tiller
    release: kibana
  name: kibana
spec:
  replicas: 1
  revisionHistoryLimit: 3
  template:
    metadata:
      annotations:
        checksum/config: 1d3b1dc23875847bc883e0a0fbd77c0fd0a7aee36e44f17081a084baf073fa42
      labels:
        app: kibana
        release: "kibana"
    spec:
      serviceAccountName: default
      containers:
      - name: kibana
        image: "docker.elastic.co/kibana/kibana-oss:6.7.0"
        imagePullPolicy: IfNotPresent
        # env:
        ports:
        - containerPort: 5601
          name: kibana
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 256Mi
          
        volumeMounts:
        - name: kibana
          mountPath: "/usr/share/kibana/config/kibana.yml"
          subPath: kibana.yml
      tolerations:
        []
        
      volumes:
        - name: kibana
          configMap:
            name: kibana


